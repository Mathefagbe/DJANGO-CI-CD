name: Deploy Django to EC2 with Docker

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      DEBUG: ${{secrets.DEBUG}}
      # DJANGO_SETTINGS_MODULE: your_project.settings

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run migrations
        run: python manage.py migrate --no-input

  deploy:
    name: Deploy to EC2
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.EC2_SSH_KEY }}
          known_hosts: ${{ secrets.EC2_KNOWN_HOSTS }}

      - name: Clean Directory on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          script: |
            rm -rf /home/ubuntu/app/*

      - name: Copy files to EC2 via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          source: "./"
          target: "/home/ubuntu/app/"
          strip_components: 1
          script: |
            cat > /home/ubuntu/app/.env << 'EOF'
            SECRET_KEY= '${{secrets.SECRET_KEY}}'
            DEBUG= '${{secrets.DEBUG}}'
            EOF

            # Secure the .env file
            chmod 600 /home/ubuntu/app/.env
            chown ubuntu:ubuntu /home/ubuntu/app/.env

      # - name: Setup Environment
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USER }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     port: ${{ secrets.EC2_PORT || 22 }}
      #     script: |
      #       cat > /home/ubuntu/app/.env << 'EOF'
      #       DEBUG=False
      #       SECRET_KEY='${{ secrets.DJANGO_SECRET }}'
      #       DB_NAME='${{ secrets.DB_NAME }}'
      #       DB_USER='${{ secrets.DB_USER }}'
      #       DB_PASSWORD='${{ secrets.DB_PASS }}'
      #       ALLOWED_HOSTS='${{ secrets.ALLOWED_HOSTS }}'
      #       EOF

      #       # Secure the .env file
      #       chmod 600 /home/ubuntu/app/.env
      #       chown ubuntu:ubuntu /home/ubuntu/app/.env

      - name: Install Docker and Docker Compose on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          port: ${{ secrets.EC2_PORT || 22 }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install Docker
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io

            # Install Docker Compose
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            # Start Docker service
            sudo systemctl start docker
            sudo systemctl enable docker

      - name: Build and Deploy Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          port: ${{ secrets.EC2_PORT || 22 }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/app
            sudo usermod -aG docker ubuntu
            newgrp docker
            docker-compose down || true  # Continue even if no containers are running
            docker-compose build --no-cache
            docker-compose up -d
